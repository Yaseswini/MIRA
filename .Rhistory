changeBounds(react = "E2", lb = -1, ub = 1000) %>%
toycon_fba
toycon_fva = function(x.pct, x.model, x.info) {
x.fva = fluxVar(x.model, percentage = x.pct, fixObjVal = T)
x.result = lp_obj(x.fva) %>% round(9)
x.n = length(x.result)
data_frame(rxn_id = x.fva@react@react_id,
fva_lb = x.result[1:(x.n/2)],
fva_ub = x.result[(x.n/2+1):(x.n)]) %>% left_join(x.info) %>%
mutate(fva_pct = x.pct,
fva_req = fva_lb > 1e-9 | fva_ub < -1e-9,
fva_on = abs(fva_lb) > 1e-9 | abs(fva_ub) > 1e-9) %>% as.tbl
}
getwd()
setwd("C:/Users/John L/Documents")
library(reshape2)
library(dplyr)
library(sybil)
library(glpkAPI)
getwd()
read.table("C:/Users/John L/Documents/aPapin/Workspace/testReactions.txt")
t=read.table("C:/Users/John L/Documents/aPapin/Workspace/testReactions.txt")
t2=paste("{",t,"}")
head(t2)
head(t)
apply(t,1,paste,"{")
apply(t,1,paste,"{",sep="")
apply(t,1,paste,"}",sep="")
apply("{",1,paste,t,sep="")
t3=sub("r","{r",t2)
t3
t3=sub("r","{r",t2[:,])
t2[:,]
t3=sub("r","{r",t2[,1])
nrow(t2)
ncol(t2)
t=read.table("C:/Users/John L/Documents/aPapin/Workspace/testReactions.txt",stringsAsFactors = FALSE)
t2=apply(t,1,paste,"}",sep="")
t3=sub("r","{r",t2[,1])
ncol(t2)
t2
t3=sub("r","{r",t2)
t3
write(t3,"C:/Users/John L/Documents/aPapin/Workspace/reformatTestRXN.txt")
t=read.table("C:/Users/John L/Documents/aPapin/Workspace/testReactions.txt",stringsAsFactors = FALSE)
t2=apply(t,1,paste,"/'",sep="")
t3=sub("r","/'r",t2)
t3
t=read.table("C:/Users/John L/Documents/aPapin/Workspace/testReactions.txt",stringsAsFactors = FALSE)
t2=apply(t,1,paste,"'",sep="")
t3=sub("r","'r",t2)
write(t3,"C:/Users/John L/Documents/aPapin/Workspace/reformatTestRXN.txt")
x<-4
class(x)
class(x)<-"test"
class(x)
class(x)=c("e","asgd")
class(x)
y=2
x+y
x*2
class('df')
class(x)=c("character")
methods("apply")
methods("mean")
inherits(x)
class(x)
inherits(x,"character")
filePath="C:/Users/John L/Documents/Academic Planning/Personal_Statements_Cover_Letters/Rutgers Personal Statement.docx"
document=readLines(con = filePath)
filePath="C:/Users/John L/Documents/Academic Planning/Personal_Statements_Cover_Letters/Rutgers Personal Statement.txt"
document=readLines(con = filePath)
document[4][1]
document[4]
t="asfasfd"
t[1]
t[2]
as.numeric(t)
as.numeric("d")
as.integer("d")
int("3")
as.numeric("3")
as.numeric("d")
uint("df")
charToRaw("r")
class(charToRaw("r"))
class(charToRaw("r")+1)
charToRaw("r")+1
as.integer(charToRaw("r"))
t=as.integer(charToRaw("r"))
t2=t+1
t2=rawToChar(t2)
t=as.integer(charToRaw("r"))
t2=t+1
t2=as.raw(t2)
t2=rawToChar(t2)
as.integer(charToRaw("r"))
t2
charToRaw("s")
charToRaw("r")
charToRaw("a")
charToRaw("z")
charToRaw("y")
charToRaw("x")
charToRaw("X")
ls
install.packages("ggplot2")
install.packages("readr")
install.packages("roxygen2")
library(roxygen2)
roxygenise("C:/cygwin64/Comp_Epigenetics/MIRA")
getwd()
library(MIRA)
#setting paths for MIRA_analysis.R script on Rivanna server
RRBS_Dir="/scratch/ns5bc/processed/ews_patients/results_pipeline"
RRBS_Files=list.files(path = RRBS_Dir,full.names = TRUE)
RRBS_File=RRBS_Files[1]#only grabs first file arbitrarily
TFRangesDir="/scratch/ns5bc/resources/regions/LOLACore/hg38/encode_tfbs/regions"
TFRangesFiles=list.files(path = TFRangesDir, full.names = TRUE)
TFRangesFile=TFRangesFile[1] #only grabs first file arbitrarily
WD="/scratch/ns5bc/data/projects/mira"
homeDir=readline('Enter the path for the directory where MIRA directory is stored: ')
load("/scratch/ns5bc/resources/regions/LOLACore/hg38/encode_tfbs.RData") #granges list of encode tfbs regions
R.Version()
Sys.getenv("HOME")
homeDir=Sys.getenv()
RRBS_File="RRBS_cpgMethylation_EWS_T1.bed"
RRBS_File2="RRBS_cpgMethylation_EWS_L17.bed"
#TFRangesFile="C:/Users/John L/Documents/aSheffield/MIRA_Package_Project/wgEncodeRegTfbsClusteredV3.bed/wgEncodeRegTfbsClusteredV3.bed"
TFRangesFile="C:/cygwin64/Comp_Epigenetics/MIRA_Projects/wgEncodeAwgTfbsUwNhekCtcfUniPk.narrowPeak"
WD="C:/cygwin64/Comp_Epigenetics/MIRA_Projects" #working directory
MIRA_File_Path="C:/cygwin64/Comp_Epigenetics/MIRA/R/MIRA.R" #location of MIRA file
load("C:/cygwin64/Comp_Epigenetics/MIRA_Projects/encode_tfbs.RData") #granges list of encode tfbs regions, variable named ret
ret
names(ret)
names(ret[[1]])
head(ret)
head(ret[[1]])
mapply(rep, 1:4, 4:1)
sapply(rep, 1:4, 4:1)
WD="/scratch/ns5bc/processed/mira/analysis"
1:10:2
1:10
2:4
2:2:8
1:9:3
1:3:9
1:5*2
1:10*3]
1:10*3
WD
x=-3
gx=.25*x^4-.5*x^2+x
f <- function(x){
gx=.25*x^4-.5*x^2+x
}
x0=-10
x1=-3
x2=10
f(x0)
f <- function(x){
gx=.25*x^4-.5*x^2+x
return(gx)
}
f(x0)
f(x1)
f(x2)
xmin=.50*((x2-x1)^2*f(x0)-(x2^2-x0^2)*f(x1)+(x1^2-x0^2)*f(x2))/((x2-x1)*f(x1)-(x2-x0)*f(x1)+(x1-x0)f(x1))
xmin=50*((x2-x1)^2*f(x0)-(x2^2-x0^2)*f(x1)+(x1^2-x0^2)*f(x2))/((x2-x1)*f(x1)-(x2-x0)*f(x1)+(x1-x0)f(x1))
xmin=.5*((x2-x1)^2*f(x0)-(x2^2-x0^2)*f(x1)+(x1^2-x0^2)*f(x2))/((x2-x1)*f(x1)-(x2-x0)*f(x1)+(x1-x0)*f(x1))
xmin=.5*((x2^2-x1^2)*f(x0)-(x2^2-x0^2)*f(x1)+(x1^2-x0^2)*f(x2))/((x2-x1)*f(x1)-(x2-x0)*f(x1)+(x1-x0)*f(x1))
xmin=.5*((x2^2-x1^2)*f(x0)-(x2^2-x0^2)*f(x1)+(x1^2-x0^2)*f(x2))/((x2-x1)*f(x1)-(x2-x0)*f(x1)+(x1-x0)*f(x1))
f(x0)
xmin=.5*((x2^2-x1^2)*f(x0)+(x2^2-x0^2)*f(x1)+(x1^2-x0^2)*f(x2))/((x2-x1)*f(x1)+(x2-x0)*f(x1)+(x1-x0)*f(x1))
xmin=.5*((x2^2-x1^2)*f(x0)+(x2^2-x0^2)*f(x1)+(x1^2-x0^2)*f(x2))/((x2-x1)*f(x0)+(x2-x0)*f(x1)+(x1-x0)*f(x1))
xmin=.5*((x2^2-x1^2)*f(x0)-(x2^2-x0^2)*f(x1)+(x1^2-x0^2)*f(x2))/((x2-x1)*f(x0)-(x2-x0)*f(x1)+(x1-x0)*f(x1))
f(xmin)
edges=read.table(file = "C:/Users/John L/Documents/aSaucerman_Lab/ExportTGFB.sif")
edges
edges=read.table(file = "C:/Users/John L/Documents/aSaucerman_Lab/ExportTGFB.sif",sep="/t")
edges=read.table(file = "C:/Users/John L/Documents/aSaucerman_Lab/ExportTGFB.sif",sep="\t")
View(edges)
class(edges)
GNCFormat=paste(edges[,1],edges[,3],sep=",")
head(GNCFormat)
View(edges)
inputFilePath="C:/Users/John L/Documents/aSaucerman_Lab/ExportTGFB.sif"
fileName=basename(inputFilePath)
fileName
inputFilePath="C:/Users/John L/Documents/aSaucerman_Lab/ExportTGFB.sif"
fileName=basename(inputFilePath)
inputDirectory=dirname(fileName)
outputDirectory=inputDirectory
#importing edge info
edges=read.table(file = inputFilePath, sep="\t")
#reformatting
GNCFormat=paste(edges[,1],edges[,3],sep=",")
#exporting to text file
write(GNCFormat,file=paste(outputDirectory,baseName,sep="/"))
write(GNCFormat,file=paste(outputDirectory,fileName,sep="/"))
fileName
outFileName=paste0(gsub(pattern = ".sif",replacement = "",x = fileName),".txt")
outFileName
fileName=basename(inputFilePath)
outFileName=paste0(gsub(pattern = ".sif",replacement = "",x = fileName),".txt")
inputDirectory=dirname(fileName)
outputDirectory=inputDirectory
#importing edge info
edges=read.table(file = inputFilePath, sep="\t")
#reformatting
GNCFormat=paste(edges[,1],edges[,3],sep=",")
#exporting to text file
write(GNCFormat,file=paste(outputDirectory,outFileName,sep="/"))
paste(outputDirectory,outFileName,sep="/")
outputDirectory
getwd()
inputDirectory
inputDirectory=dirname(inputFilePath)
outputDirectory=inputDirectory
#importing edge info
edges=read.table(file = inputFilePath, sep="\t")
#reformatting
GNCFormat=paste(edges[,1],edges[,3],sep=",")
#exporting to text file
write(GNCFormat,file=paste(outputDirectory,outFileName,sep="/"))
fMeasure=0.666666
recall=0.666666
recall=fMeasure*precision/(2*precision-fMeasure)
precision=0.666666
recall=fMeasure*precision/(2*precision-fMeasure)
7/13
8/13
7/12
13/24
27/48
55/96
fMeasure=0.571429
precision=0.666666
recall=fMeasure*precision/(2*precision-fMeasure)
fMeasure=0.5
precision=0.666666
recall=fMeasure*precision/(2*precision-fMeasure)
fMeasure=[1.00,
0.80,
0.67,
0.57,
0.50,
0.44]
fMeasure=c(1.00,
0.80,
0.67,
0.57,
0.50,
0.44)
precision=1
recall=fMeasure*precision/(2*precision-fMeasure)
recall
4/14
fMeasure=4/c(4:9)
precision=1
recall=fMeasure*precision/(2*precision-fMeasure)
recall
fMeasure=0.75#4/c(4:9)
precision=1
recall=fMeasure*precision/(2*precision-fMeasure)
fMeasure=0.888888#4/c(4:9)
precision=1
recall=fMeasure*precision/(2*precision-fMeasure)
fMeasure=0.9523#4/c(4:9)
precision=1
recall=fMeasure*precision/(2*precision-fMeasure)
fMeasure=0.952381#4/c(4:9)
precision=1
recall=fMeasure*precision/(2*precision-fMeasure)
10/11
fMeasure=0.9836#4/c(4:9)
precision=1
recall=fMeasure*precision/(2*precision-fMeasure)
fMeasure=0.983607#4/c(4:9)
precision=1
recall=fMeasure*precision/(2*precision-fMeasure)
11/12
12/13
13/14
21/22
22/23
24/25
26/27
27/28
29/30
30/31
11/12
7/8
15/16
22/24
29/32
98/112
99/112
100/112
101/112
6/49
6/50
6/48
5/48
1-(5/48)
1-(5/49)
1-0.976744
0.893617-.875
0.913043-0.893617
6/49
6/48
6/98
library(LOLA)
source("https://bioconductor.org/biocLite.R")
biocLite("LOLA")
library(LOLA)
t=1:100
t2=1:100
plot(t,t2)
plot(t,log(t))
getwd()
$HOME
Sys.getenv()
install.packages("installr")
library(installr)
updateR()
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("LOLA")
library(LOLA)
LOLA
LOLA?
dl
?"LOLA"
log(2.7)
R=8.314
T=273.15
z=1
F=96485
Xo=10
Xi=100
V=(R*T)/(z*F)*log(Xo/Xi)
R=8.314
T=273.15*37
z=1
F=96485
Xo=10
Xi=100
V=(R*T)/(z*F)*log(Xo/Xi)
T=273.15+37
z=1
F=96485
Xo=10
Xi=100
V=(R*T)/(z*F)*log(Xo/Xi)
getwd()
?c
library(dplyr)
install.packages("dplyr")
library(rmarkdown)
install.packages("rmarkdown")
getwd()
library(project.init)
library(simpleCache)
getwd()
Sys.Date()
Sys.Date()
Sys.time()
Sys.getenv("RESOURCES")
ecSubset=epicom[ecIndex,]
# plyr::count(ecSubset$cell_type) #info about how many of each cell type
RRBS_Files=ecSubset$BSFile
#selecting a subset of region files
encodeTFBSDir=paste0(Sys.getenv("RESOURCES"),"regions/LOLACore/hg38/encode_tfbs/regions")
encodeTFBSFiles=list.files(path = encodeTFBSDir)
#subEncodeFiles=encodeTFBSFiles[grep("CTCF|Pol2",x = encodeTFBSFiles,ignore.case = TRUE,invert = TRUE)]
#subEncodeFiles=encodeTFBSFiles[grep("cebp|yy1|sirt|nrf1|foxa1|usf",x = encodeTFBSFiles,ignore.case = TRUE)]
desiredRegions=c("cebp","yy1","sirt","nrf1","foxa1","usf","gata","stat","myc","jun","brf")
subEncodeFiles=""
for (i in 1:length(desiredRegions)){
thisRegionFiles=grep(pattern = desiredRegions[i],x = encodeTFBSFiles,ignore.case = TRUE)
#arbitrarily taking the first region file to not have too much redundancy
subEncodeFiles=c(subEncodeFiles,encodeTFBSFiles[thisRegionFiles[1]])
}
subEncodeFiles=subEncodeFiles[-1]#taking out the empty "preallocation" string
myRegions=getRegionSet(regionDB,collections="encode_tfbs",filenames=subEncodeFiles)
names(myRegions)<- subEncodeFiles #annotation
t="ast"
t == NULL
NULL
r = NULL
r == NULL
is.null(r)
r==NULL
!is.null(r)
t=[1:5]
t=1:5
t2=1:5
mapply(FUN = sum(),t,t2)
mapply(FUN = sum,t,t2)
d=mapply(FUN = sum,t,t2)
class(d)
d
length(d)
d[1]
d[4]
d=mapply(FUN = sum,t,t2,SIMPLIFY = FALSE)
d
class(d)
library(LOLA)
library(project.init)
library(MIRA)
library(simpleCache)
library(dplyr) #needed for left_join()
resultsDir=paste0(Sys.getenv("PROCESSED"),"mira/analysis/Bcell_epithelial/")
setCacheDir(resultsDir)
binNum=11
regionDB
hist(1:5)
c(3:5)
3:5
3:1:5
3:2:5
3:5/100
GetDump()
getOption("continue")
getOption("save.image.defaults")
options(save.image.defaults=FALSE)
getOption("save.image.defaults")
alskjdf=1:3
GetDump
load("C:/cygwin64/Comp_Epigenetics/dump/BSDTListBcellEpithelial.RData")
load("encodeRegionSampling.RData")
load("C:/cygwin64/Comp_Epigenetics/dump/encodeRegionSampling.RData")
head(BSDTList)
names(BSDTList)
object.size(someFeatures)
BSDTList=BSDTList[1:3,11:13]
BSDTList=BSDTList[c(1:3,11:13)]
length(BSDTList)
class(BSDTList)
getwd()
save(BSDTList,file="C:/cygwin64/Comp_Epigenetics/MIRA_Projects/BSDTListBcellepithelial3_3.RData")
someFeatures=someFeatures[1:6]
library(MIRA)
bigBin=lapply(X = BSDTList,FUN = returnMIRABins,GRList=someFeatures,binNum=binNum,sampleNameInBSDT=TRUE)
returnMIRABins = function(BSDT,GRList, binNum=11, sampleNameInBSDT=TRUE,sampleType=NULL){
#changing GRList to list of data tables
if (!"data.table" %in% class(GRList[[1]])){
GRDTList=lapply(X = GRList,FUN = grToDt)#GRanges to data.tables
}
methylByBin=lapply(X = GRDTList, FUN = function(x) BSBinAggregate(BSDT = BSDT,rangeDT = x, binCount = binNum,splitFactor=NULL))
names(methylByBin)=names(GRList)#preserving names
#adding a feature ID column to each data.table that should identify what region set was used
for (i in 1:length(methylByBin)){
methylByBin[[i]][,featureID := rep(names(methylByBin)[i],nrow(methylByBin[[i]]))]
}
#screening out region sets that had incomplete binning
binNumScreen=sapply(X = methylByBin,FUN = nrow)
methylByBin=methylByBin[!(binNumScreen<binNum)]#taking out incomplete region sets
bigMethylByBin=rbindlist(methylByBin)
if (sampleNameInBSDT){
bigMethylByBin[,sampleName := rep(BSDT[1,sampleName])] #creating new sampleName column
}
return(bigMethylByBin)
}
bigBin=lapply(X = BSDTList,FUN = returnMIRABins,GRList=someFeatures,binNum=binNum,sampleNameInBSDT=TRUE)
bigBin=lapply(X = BSDTList,FUN = returnMIRABins,GRList=someFeatures,binNum=11,sampleNameInBSDT=TRUE)
BSDTList=addMethCol(BSDTList = BSDTList)
bigBin=lapply(X = BSDTList,FUN = returnMIRABins,GRList=someFeatures,binNum=binNum,sampleNameInBSDT=TRUE)
bigBin=lapply(X = BSDTList,FUN = returnMIRABins,GRList=someFeatures,binNum=11,sampleNameInBSDT=TRUE)
rbindlist
library(data.table)
bigBin=lapply(X = BSDTList,FUN = returnMIRABins,GRList=someFeatures,binNum=11,sampleNameInBSDT=TRUE)
object.size(bigBin)
system.file("scoreMIRA")
system.file("lapply")
system.file(lapply)
system.time()
proc.time()
t=proc.time()
proc.time()-t
bigBinDT=rbindlist(bigBin)#need to make sure that sample names have a column in here
plotMIRARegions(bigBinDT)
library(ggplot2)
plotMIRARegions(bigBinDT)
head(bigBinDT)
plotMIRARegions <- function(binnedRegDT,featID=unique(binnedRegDT[,featureID]),plotType="line"){
setkey(binnedRegDT,featureID)
binPlot=ggplot(data=binnedRegDT[featID], mapping = aes(x=regionGroupID,y = methyl))
if (!("sampleType" %in% names(binnedRegDT))){
sampleType="black" #if no sampleType column then all lines/points will be black
}
if (plotType=="line"){
binPlot=binPlot+geom_line(aes(col=sampleType,group=sampleName))+facet_wrap(~featureID)
}else if (plotType=="jitter"){
binPlot=binPlot+geom_jitter(aes(col=sampleType))+facet_wrap(~featureID)
}else {
stop('The only supported values for plotType are "line" and "jitter"')
}
return(binPlot)
}
#' A function to plot MIRA scores and compare case/control.
#'
#
plotMIRARegions(bigBinDT)
name(bigBinDT)
names(bigBinDT)
library("MIRA")
getwd()
setwd("c:/cygwin64/Comp_Epigenetics/code/MIRA")
devtools::check()
